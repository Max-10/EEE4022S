{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UploadedCSV",
						"type": "DatasetReference"
					},
					"name": "WeightLogCSV"
				},
				{
					"dataset": {
						"referenceName": "UploadedCSV",
						"type": "DatasetReference"
					},
					"name": "RawTagDataCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "EventOutputCSV",
						"type": "DatasetReference"
					},
					"name": "Sink"
				},
				{
					"dataset": {
						"referenceName": "EventOutputCSV",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "PenguinEvent",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "TagIDTable",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "DateTimeColumn"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "FilteredDebugInfo"
				},
				{
					"name": "CleaningandDateTime"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Select2"
				},
				{
					"name": "TagIDextraction"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "EventID"
				},
				{
					"name": "Select3"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "source(output(\n\t\tEpoch as integer,\n\t\tWeight as double,\n\t\tColonyID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_weight'],\n\twildcardPaths:['up_weight*.csv'],\n\tpartitionBy('hash', 1)) ~> WeightLogCSV\nsource(output(\n\t\tEpoch as integer,\n\t\tMessage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_serial'],\n\twildcardPaths:['up_serial*.csv']) ~> RawTagDataCSV\nWeightLogCSV derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> DateTimeColumn\nSelect3 filter(0.8<Weight\r\n&&Weight<10) ~> Filter1\nRawTagDataCSV filter(startsWith(Message, 'TAG')) ~> FilteredDebugInfo\nTagIDextraction derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> CleaningandDateTime\nCleaningandDateTime keyGenerate(output(EventID as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nFilteredDebugInfo derive(Message = toInteger(trim(right(trim(left(Message,7)),2)))) ~> TagIDextraction\nFilter1 alterRow(upsertIf(true()),\n\tpartitionBy('hash', 1)) ~> AlterRow1\nSelect2 alterRow(upsertIf(true())) ~> AlterRow2\nDateTimeColumn derive(EventID = concat(toString(ColonyID),toString(Epoch))) ~> EventID\nDerivedColumn1 select(mapColumn(\n\t\tEventID,\n\t\tDate,\n\t\tTime,\n\t\tWeight,\n\t\tColonyID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nEventID derive(EventID = toFloat(EventID)) ~> DerivedColumn1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"WeightLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tDate,\n\t\tTime,\n\t\tWeight,\n\t\tColonyID\n\t),\n\tpartitionBy('hash', 1)) ~> Sink\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"TagLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tpartitionBy('hash', 1)) ~> sink1\nAlterRow1 sink(input(\n\t\tEventID as integer,\n\t\tEpoch as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tPenguinWeight as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tPenguinWeight = Weight,\n\t\tEpoch = ColonyID\n\t)) ~> sink2\nAlterRow2 sink(input(\n\t\tEventID as integer,\n\t\tEpoch as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TagID] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TagID] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tTagID = Message\n\t),\n\tpartitionBy('hash', 1)) ~> sink3"
		}
	}
}