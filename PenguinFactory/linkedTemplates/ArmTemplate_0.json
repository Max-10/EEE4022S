{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "PenguinFactory"
		},
		"Blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Blob'"
		},
		"PowerBISQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PowerBISQL'"
		},
		"SQLdatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLdatabase'"
		},
		"UploadEvent_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ff093b4d-e1b6-4506-b8f7-32420f93b811/resourceGroups/PenguinProject/providers/Microsoft.Storage/storageAccounts/inputblob"
		},
		"ColonyEvent_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ff093b4d-e1b6-4506-b8f7-32420f93b811/resourceGroups/PenguinProject/providers/Microsoft.Storage/storageAccounts/inputblob"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Blob storage of raw inputs, and the cleaned outputs prior to being sent to various sql tables.\nContains weight logs, Tag Logs, and individual weigh event logs.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBISQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "PowerBI SQL database",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('PowerBISQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLdatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Database which contains tables for directQuery Connection to PowerBi workspace. Contains PenguinEventTable, TagID tables, and potentially WeighBridgeStepEvents",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQLdatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UploadEvent')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Calls the pipeline whenever a file is uploaded",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/uploadblob/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('UploadEvent_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ColonyTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ColonyID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColonyName",
						"type": "varchar"
					},
					{
						"name": "Lat",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Long",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Colony"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLdatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventOutputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Stores transformed data for export into sql table PenguinEvent.",
				"linkedServiceName": {
					"referenceName": "Blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "cleanedoutputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fuck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DemoDataQuery.csv",
						"container": "uploadblob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PenguinEvent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EventID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "date"
					},
					{
						"name": "EventTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "PenguinWeight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ColonyID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TagID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PenguinEvent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLdatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBiPenguinEvent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PowerBISQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EventID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "date"
					},
					{
						"name": "EventTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "TagID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PenguinWeight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Direction",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Change",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ColonyID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PenguinEventQuery"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PowerBISQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TagIDTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EventID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Epoch",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "date"
					},
					{
						"name": "EventTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "TagID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TagID"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLdatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UploadedCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "uploadblob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InitialisePowerBi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "Int64",
											"ordinal": 1
										},
										"sink": {
											"name": "EventID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 2
										},
										"sink": {
											"name": "EventDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"type": "TimeSpan",
											"ordinal": 3
										},
										"sink": {
											"name": "EventTime",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"type": "Int64",
											"ordinal": 4
										},
										"sink": {
											"name": "TagID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "Double",
											"ordinal": 5
										},
										"sink": {
											"name": "PenguinWeight",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"type": "Int32",
											"ordinal": 6
										},
										"sink": {
											"name": "Direction",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "Double",
											"ordinal": 7
										},
										"sink": {
											"name": "Change",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Fuck",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "PowerBiPenguinEvent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Fuck')]",
				"[concat(variables('factoryId'), '/datasets/PowerBiPenguinEvent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ColonytoSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UploadedCSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ColonyTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tColonyID as short,\n\t\tColonyName as string,\n\t\tLatitude as double,\n\t\tLongitude as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tpurgeFiles: true,\n\twildcardPaths:['colony*']) ~> source1\nsource1 alterRow(upsertIf(true()),\n\tpartitionBy('hash', 1)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tColonyID as integer,\n\t\tColonyName as string,\n\t\tLat as double,\n\t\tLong as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ColonyID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[Colony] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[Colony] OFF'],\n\tmapColumn(\n\t\tColonyID,\n\t\tColonyName,\n\t\tLat = Latitude,\n\t\tLong = Longitude\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UploadedCSV')]",
				"[concat(variables('factoryId'), '/datasets/ColonyTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToPowerBI')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PenguinEvent",
								"type": "DatasetReference"
							},
							"name": "PenguinEvent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PowerBiPenguinEvent",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEventID as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tPenguinWeight as double,\n\t\tColonyID as integer,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PenguinEvent\nPenguinEvent alterRow(insertIf(1==1)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tEventID as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tTagID as integer,\n\t\tPenguinWeight as double,\n\t\tDirection as integer,\n\t\tChange as double,\n\t\tColonyID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEventQuery] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEventQuery] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEventDate,\n\t\tEventTime,\n\t\tPenguinWeight,\n\t\tColonyID\n\t),\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PenguinEvent')]",
				"[concat(variables('factoryId'), '/datasets/PowerBiPenguinEvent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventsToSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Takes input events, cleans them and ships it to a cleaned CSV file, then uploads into a SQL table.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UploadedCSV",
								"type": "DatasetReference"
							},
							"name": "WeightLogCSV"
						},
						{
							"dataset": {
								"referenceName": "UploadedCSV",
								"type": "DatasetReference"
							},
							"name": "RawTagDataCSV"
						},
						{
							"dataset": {
								"referenceName": "TagIDTable",
								"type": "DatasetReference"
							},
							"name": "TagSQl"
						},
						{
							"dataset": {
								"referenceName": "PenguinEvent",
								"type": "DatasetReference"
							},
							"name": "PenguinEvent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EventOutputCSV",
								"type": "DatasetReference"
							},
							"name": "Sink"
						},
						{
							"dataset": {
								"referenceName": "EventOutputCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "PenguinEvent",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "TagIDTable",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "DateTimeColumn"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "FilteredDebugInfo"
						},
						{
							"name": "CleaningandDateTime"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "TagIDextraction"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "SurrogateKey2"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "NullFix"
						}
					],
					"script": "source(output(\n\t\tEpoch as integer,\n\t\tWeight as double,\n\t\tColonyID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_weight'],\n\twildcardPaths:['up_weight*.csv'],\n\tpartitionBy('hash', 1)) ~> WeightLogCSV\nsource(output(\n\t\tEpoch as integer,\n\t\tMessage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_serial'],\n\twildcardPaths:['up_serial*.csv']) ~> RawTagDataCSV\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select MAX(EventID) as maxval from dbo.TagID',\n\tformat: 'query',\n\tpartitionBy('hash', 1)) ~> TagSQl\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select MAX(EventID) as maxval from dbo.PenguinEvent',\n\tformat: 'query') ~> PenguinEvent\nJoin3 derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> DateTimeColumn\nDerivedColumn2 filter(0.8<Weight\r\n&&Weight<10) ~> Filter1\nRawTagDataCSV filter(startsWith(Message, 'TAG')) ~> FilteredDebugInfo\nTagIDextraction derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> CleaningandDateTime\nCleaningandDateTime keyGenerate(output(EventID as long),\n\tstartAt: 1L) ~> SurrogateKey1\nDerivedColumn1 select(mapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nFilteredDebugInfo derive(Message = toInteger(trim(right(trim(left(Message,7)),2)))) ~> TagIDextraction\nFilter1 alterRow(upsertIf(true()),\n\tpartitionBy('hash', 1)) ~> AlterRow1\nSelect2 alterRow(upsertIf(true())) ~> AlterRow2\nDateTimeColumn keyGenerate(output(EventID as long),\n\tstartAt: 1L) ~> SurrogateKey2\nSurrogateKey1 derive(EventID = toInteger(EventID)) ~> DerivedColumn1\nNullFix derive(EventID = EventID + maxval) ~> DerivedColumn2\nWeightLogCSV, PenguinEvent join(1 == 1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nSurrogateKey2 derive(maxval = toInteger(byName('maxval'))) ~> MapDrifted1\nMapDrifted1 derive(Epoch = iifNull(Epoch, 0),\n\t\tWeight = iifNull(Weight, 0),\n\t\tColonyID = iifNull(ColonyID, 0),\n\t\tmaxval = iifNull(maxval, 0),\n\t\tEventID = iifNull(EventID, 0),\n\t\tDate = Date,\n\t\tTime = Time) ~> NullFix\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"WeightLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch\n\t),\n\tpartitionBy('hash', 1)) ~> Sink\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"TagLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tpartitionBy('hash', 1)) ~> sink1\nAlterRow1 sink(input(\n\t\tEventID as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tPenguinWeight as double,\n\t\tColonyID as integer,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tPenguinWeight = Weight,\n\t\tColonyID\n\t),\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'MM-dd-yyyy HH:mm:ss') ~> sink2\nAlterRow2 sink(input(\n\t\tEventID as integer,\n\t\tEpoch as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TagID] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TagID] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tTagID = Message\n\t),\n\tpartitionBy('hash', 1)) ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UploadedCSV')]",
				"[concat(variables('factoryId'), '/datasets/TagIDTable')]",
				"[concat(variables('factoryId'), '/datasets/PenguinEvent')]",
				"[concat(variables('factoryId'), '/datasets/EventOutputCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventsToSQL_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Takes input events, cleans them and ships it to a cleaned CSV file, then uploads into a SQL table.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UploadedCSV",
								"type": "DatasetReference"
							},
							"name": "WeightLogCSV"
						},
						{
							"dataset": {
								"referenceName": "UploadedCSV",
								"type": "DatasetReference"
							},
							"name": "RawTagDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EventOutputCSV",
								"type": "DatasetReference"
							},
							"name": "Sink"
						},
						{
							"dataset": {
								"referenceName": "EventOutputCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "PenguinEvent",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "TagIDTable",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "DateTimeColumn"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "FilteredDebugInfo"
						},
						{
							"name": "CleaningandDateTime"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "TagIDextraction"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "EventID"
						},
						{
							"name": "Select3"
						},
						{
							"name": "SurrogateKey2"
						}
					],
					"script": "source(output(\n\t\tEpoch as integer,\n\t\tWeight as double,\n\t\tColonyID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_weight'],\n\twildcardPaths:['up_weight*.csv'],\n\tpartitionBy('hash', 1)) ~> WeightLogCSV\nsource(output(\n\t\tEpoch as integer,\n\t\tMessage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['','historic_serial'],\n\twildcardPaths:['up_serial*.csv']) ~> RawTagDataCSV\nWeightLogCSV derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> DateTimeColumn\nSelect3 filter(0.8<Weight\r\n&&Weight<10) ~> Filter1\nRawTagDataCSV filter(startsWith(Message, 'TAG')) ~> FilteredDebugInfo\nTagIDextraction derive(Date = trim(left(toString(toTimestamp(seconds(Epoch))),10)),\n\t\tTime = toTimestamp(trim(right(toString(toTimestamp(seconds(Epoch))),8)), 'HH:mm:ss')) ~> CleaningandDateTime\nCleaningandDateTime keyGenerate(output(EventID as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nFilteredDebugInfo derive(Message = toInteger(trim(right(trim(left(Message,7)),2)))) ~> TagIDextraction\nFilter1 alterRow(upsertIf(true()),\n\tpartitionBy('hash', 1)) ~> AlterRow1\nSelect2 alterRow(upsertIf(true())) ~> AlterRow2\nDateTimeColumn derive(PseudoKey = add(ColonyID*100000000, Epoch)) ~> EventID\nSurrogateKey2 select(mapColumn(\n\t\tEventID,\n\t\tDate,\n\t\tTime,\n\t\tWeight,\n\t\tColonyID,\n\t\tEpoch,\n\t\tPseudoKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nEventID keyGenerate(output(EventID as long),\n\tstartAt: 1L) ~> SurrogateKey2\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"WeightLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tDate,\n\t\tTime,\n\t\tWeight,\n\t\tColonyID,\n\t\tEpoch,\n\t\tPseudoKey\n\t),\n\tpartitionBy('hash', 1)) ~> Sink\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(toString(\"TagLog_\") ,toString(currentDate())))],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tDate,\n\t\tTime,\n\t\tMessage\n\t),\n\tpartitionBy('hash', 1)) ~> sink1\nAlterRow1 sink(input(\n\t\tEventID as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tPenguinWeight as double,\n\t\tColonyID as integer,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[PenguinEvent] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tPenguinWeight = Weight,\n\t\tColonyID\n\t),\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'MM-dd-yyyy HH:mm:ss') ~> sink2\nAlterRow2 sink(input(\n\t\tEventID as integer,\n\t\tEpoch as integer,\n\t\tEventDate as date,\n\t\tEventTime as timestamp,\n\t\tTagID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EventID'],\n\tformat: 'table',\n\tpreSQLs:['SET IDENTITY_INSERT [dbo].[TagID] ON'],\n\tpostSQLs:['SET IDENTITY_INSERT [dbo].[TagID] OFF'],\n\tmapColumn(\n\t\tEventID,\n\t\tEpoch,\n\t\tEventDate = Date,\n\t\tEventTime = Time,\n\t\tTagID = Message\n\t),\n\tpartitionBy('hash', 1)) ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UploadedCSV')]",
				"[concat(variables('factoryId'), '/datasets/EventOutputCSV')]",
				"[concat(variables('factoryId'), '/datasets/PenguinEvent')]",
				"[concat(variables('factoryId'), '/datasets/TagIDTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Colony')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Takes an uploaded colony table and uploads it to SQL",
				"activities": [
					{
						"name": "ColonytoSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ColonytoSQL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ColonytoSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FakeToPowerBI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyToPowerBI",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CopyToPowerBI",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PenguinEvent": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CopyToPowerBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeightSerialLogToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleaningofData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EventsToSQL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WeightLogCSV": {},
									"RawTagDataCSV": {},
									"TagSQl": {},
									"PenguinEvent": {},
									"Sink": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-10-08T11:53:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EventsToSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ColonyEvent')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Colony",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/uploadblob/blobs/colony",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('ColonyEvent_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Colony')]"
			]
		}
	]
}